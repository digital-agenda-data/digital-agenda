# Generated by Django 5.2.7 on 2025-10-07 07:43

import colorfield.fields
from django.contrib.postgres.operations import CITextExtension

import digital_agenda.apps.charts.models
import digital_agenda.common.citext
import django.core.validators
import django.db.models.deletion
import hashid_field.field
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial_squashed"),
    ]

    operations = [
        CITextExtension(),
        migrations.CreateModel(
            name="BreakdownChartOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Color used for this indicator chart series",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                    ),
                ),
                (
                    "dash_style",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Dash", "Dash"),
                            ("DashDot", "DashDot"),
                            ("Dot", "Dot"),
                            ("LongDash", "LongDash"),
                            ("LongDashDot", "LongDashDot"),
                            ("LongDashDotDot", "LongDashDotDot"),
                            ("ShortDash", "ShortDash"),
                            ("ShortDashDot", "ShortDashDot"),
                            ("ShortDashDotDot", "ShortDashDotDot"),
                            ("ShortDot", "ShortDot"),
                            ("Solid", "Solid"),
                        ],
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.dashStyle",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "line_width",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.series.lineWidth",
                        null=True,
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("circle", "circle"),
                            ("square", "square"),
                            ("diamond", "diamond"),
                            ("triangle", "triangle"),
                            ("triangle-down", "triangle-down"),
                        ],
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.marker.symbol",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "custom_symbol",
                    models.ImageField(
                        blank=True,
                        default=None,
                        help_text="Custom symbol used instead of the predefined ones",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "marker_enabled",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.marker.enabled",
                        null=True,
                    ),
                ),
                (
                    "marker_radius",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.marker.radius",
                        null=True,
                    ),
                ),
                (
                    "data_labels_enabled",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.dataLabels.enabled",
                        null=True,
                    ),
                ),
                (
                    "breakdown",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chart_options",
                        to="core.breakdown",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChartGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "is_draft",
                    models.BooleanField(
                        default=False,
                        help_text="Draft items will only be visible for admins.",
                    ),
                ),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("short_name", models.CharField(max_length=40)),
                ("license", models.TextField()),
                ("description", models.TextField()),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Thumbnail image for this Chart Group. A placeholder will be used if this is not configured.",
                        upload_to="",
                    ),
                ),
                (
                    "indicator_group_label",
                    models.CharField(default="Indicator group", max_length=60),
                ),
                (
                    "indicator_label",
                    models.CharField(default="Indicator", max_length=60),
                ),
                (
                    "breakdown_group_label",
                    models.CharField(default="Breakdown group", max_length=60),
                ),
                (
                    "breakdown_label",
                    models.CharField(default="Breakdown", max_length=60),
                ),
                ("period_label", models.CharField(default="Period", max_length=60)),
                (
                    "unit_label",
                    models.CharField(default="Unit of measure", max_length=60),
                ),
                (
                    "period_start",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Limit chart group to the specific periods greater than or equal to this year",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1990)],
                    ),
                ),
                (
                    "period_end",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Limit chart group to the specific periods less than or equal to this year",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1990)],
                    ),
                ),
                ("indicator_groups", models.ManyToManyField(to="core.indicatorgroup")),
            ],
            options={
                "ordering": ["display_order", "code"],
            },
        ),
        migrations.CreateModel(
            name="Chart",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "is_draft",
                    models.BooleanField(
                        default=False,
                        help_text="Draft items will only be visible for admins.",
                    ),
                ),
                (
                    "id",
                    hashid_field.field.BigHashidAutoField(
                        alphabet="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
                        min_length=13,
                        prefix="",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("code", models.SlugField(max_length=255)),
                (
                    "chart_type",
                    models.CharField(
                        choices=[
                            (
                                "Column",
                                [
                                    (
                                        "COLUMN_COMPARE_COUNTRIES",
                                        "Column Chart: Compare Countries",
                                    ),
                                    (
                                        "COLUMN_COMPARE_BREAKDOWNS",
                                        "Column Chart: Compare Breakdowns",
                                    ),
                                    (
                                        "COLUMN_STACKED_COMPARE_BREAKDOWNS",
                                        "Column Chart Stacked: Compare Breakdowns",
                                    ),
                                    (
                                        "COLUMN_STACKED_COMPARE_BREAKDOWNS_WEIGHTED",
                                        "Column Chart Stacked: Compare Breakdowns Weighted",
                                    ),
                                ],
                            ),
                            (
                                "Bar",
                                [
                                    (
                                        "BAR_COMPARE_COUNTRIES",
                                        "Bar Chart: Compare Countries",
                                    ),
                                    (
                                        "BAR_COMPARE_BREAKDOWNS",
                                        "Bar Chart: Compare Breakdowns",
                                    ),
                                    (
                                        "BAR_STACKED_COMPARE_BREAKDOWNS",
                                        "Bar Chart Stacked: Compare Breakdowns",
                                    ),
                                    (
                                        "BAR_STACKED_COMPARE_BREAKDOWNS_WEIGHTED",
                                        "Bar Chart Stacked: Compare Breakdowns Weighted",
                                    ),
                                ],
                            ),
                            (
                                "Spline",
                                [
                                    (
                                        "SPLINE_COMPARE_COUNTRIES",
                                        "Spline Chart: Compare Countries",
                                    ),
                                    (
                                        "SPLINE_COMPARE_BREAKDOWNS",
                                        "Spline Chart: Compare Breakdowns",
                                    ),
                                    (
                                        "SPLINE_COMPARE_TWO_INDICATORS",
                                        "Spline Chart: Compare Two Indicators",
                                    ),
                                ],
                            ),
                            (
                                "Scatter",
                                [
                                    (
                                        "SCATTER_COMPARE_TWO_INDICATORS",
                                        "Scatter Chart: Compare Two Indicators",
                                    )
                                ],
                            ),
                            (
                                "Bubble",
                                [
                                    (
                                        "BUBBLE_COMPARE_THREE_INDICATORS",
                                        "Bubble Chart: Compare Three Indicators",
                                    )
                                ],
                            ),
                            (
                                "EU Map",
                                [
                                    (
                                        "MAP_EU_COMPARE_COUNTRIES",
                                        "EU Map Chart: Compare Countries",
                                    )
                                ],
                            ),
                            (
                                "World Map",
                                [
                                    (
                                        "MAP_WORLD_COMPARE_COUNTRIES",
                                        "World Map Chart: Compare Countries",
                                    )
                                ],
                            ),
                            ("Table", [("TABLE_DEBUG_DATA", "Table: Debug Data")]),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Custom thumbnail image to use for this chart. If not set, a default one will be used depending on the chart type.",
                        upload_to="",
                    ),
                ),
                (
                    "min_value",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Minimum value of the axis. Used for all axes that display fact values.This can be vertical, horizontal, or both depending on the chart type.",
                        null=True,
                    ),
                ),
                (
                    "max_value",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Maximum value of the axis. Used for all axes that display fact values.This can be vertical, horizontal, or both depending on the chart type.",
                        null=True,
                    ),
                ),
                (
                    "min_year",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="Minimum year of the axis. Used for all axes that display dates.This can be vertical, horizontal, or both depending on the chart type.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1990)],
                    ),
                ),
                (
                    "max_year",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="Maximum year of the axis. Used for all axes that display dates.This can be vertical, horizontal, or both depending on the chart type.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1990)],
                    ),
                ),
                (
                    "indicator_group_filter_hidden",
                    models.BooleanField(
                        default=False, help_text="Force hide the filter for this chart."
                    ),
                ),
                (
                    "indicator_filter_hidden",
                    models.BooleanField(
                        default=False, help_text="Force hide the filter for this chart."
                    ),
                ),
                (
                    "breakdown_group_filter_hidden",
                    models.BooleanField(
                        default=False, help_text="Force hide the filter for this chart."
                    ),
                ),
                (
                    "breakdown_filter_hidden",
                    models.BooleanField(
                        default=False, help_text="Force hide the filter for this chart."
                    ),
                ),
                (
                    "period_filter_hidden",
                    models.BooleanField(
                        default=False, help_text="Force hide the filter for this chart."
                    ),
                ),
                (
                    "unit_filter_hidden",
                    models.BooleanField(
                        default=False, help_text="Force hide the filter for this chart."
                    ),
                ),
                (
                    "country_filter_hidden",
                    models.BooleanField(
                        default=False, help_text="Force hide the filter for this chart."
                    ),
                ),
                (
                    "indicator_label",
                    digital_agenda.apps.charts.models.ChartDimensionLabel(
                        blank=True,
                        choices=[
                            ("label", "Long (label)"),
                            ("alt_label", "Short (alt_label)"),
                            ("code", "Code (code)"),
                        ],
                        default=None,
                        help_text="Label type used while displaying this dimension in the chart. If empty the other labels are used instead.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "breakdown_label",
                    digital_agenda.apps.charts.models.ChartDimensionLabel(
                        blank=True,
                        choices=[
                            ("label", "Long (label)"),
                            ("alt_label", "Short (alt_label)"),
                            ("code", "Code (code)"),
                        ],
                        default=None,
                        help_text="Label type used while displaying this dimension in the chart. If empty the other labels are used instead.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "period_label",
                    digital_agenda.apps.charts.models.ChartDimensionLabel(
                        blank=True,
                        choices=[
                            ("label", "Long (label)"),
                            ("alt_label", "Short (alt_label)"),
                            ("code", "Code (code)"),
                        ],
                        default=None,
                        help_text="Label type used while displaying this dimension in the chart. If empty the other labels are used instead.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "unit_label",
                    digital_agenda.apps.charts.models.ChartDimensionLabel(
                        blank=True,
                        choices=[
                            ("label", "Long (label)"),
                            ("alt_label", "Short (alt_label)"),
                            ("code", "Code (code)"),
                        ],
                        default=None,
                        help_text="Label type used while displaying this dimension in the chart. If empty the other labels are used instead.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "country_label",
                    digital_agenda.apps.charts.models.ChartDimensionLabel(
                        blank=True,
                        choices=[
                            ("label", "Long (label)"),
                            ("alt_label", "Short (alt_label)"),
                            ("code", "Code (code)"),
                        ],
                        default=None,
                        help_text="Label type used while displaying this dimension in the chart. If empty the other labels are used instead.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "use_period_label_for_axis",
                    models.BooleanField(
                        default=False,
                        help_text="Use the period labels for date axis instead of the actual dates.",
                    ),
                ),
                (
                    "legend_layout",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("horizontal", "horizontal"),
                            ("vertical", "vertical"),
                        ],
                        default=None,
                        help_text="Choose default legend layout type",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "breakdown_filter_defaults",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Multiple defaults can be specified, however only valid choices depending on the other filters will be used.",
                        related_name="default_charts",
                        to="core.breakdown",
                    ),
                ),
                (
                    "breakdown_filter_ignored",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Values specified here will be hidden and not available for selection.",
                        related_name="ignored_charts",
                        to="core.breakdown",
                    ),
                ),
                (
                    "breakdown_group_filter_defaults",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Multiple defaults can be specified, however only valid choices depending on the other filters will be used.",
                        related_name="default_charts",
                        to="core.breakdowngroup",
                    ),
                ),
                (
                    "breakdown_group_filter_ignored",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Values specified here will be hidden and not available for selection.",
                        related_name="ignored_charts",
                        to="core.breakdowngroup",
                    ),
                ),
                (
                    "country_filter_defaults",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Multiple defaults can be specified, however only valid choices depending on the other filters will be used.",
                        related_name="default_charts",
                        to="core.country",
                    ),
                ),
                (
                    "country_filter_ignored",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Values specified here will be hidden and not available for selection.",
                        related_name="ignored_charts",
                        to="core.country",
                    ),
                ),
                (
                    "indicator_filter_defaults",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Multiple defaults can be specified, however only valid choices depending on the other filters will be used.",
                        related_name="default_charts",
                        to="core.indicator",
                    ),
                ),
                (
                    "indicator_filter_ignored",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Values specified here will be hidden and not available for selection.",
                        related_name="ignored_charts",
                        to="core.indicator",
                    ),
                ),
                (
                    "indicator_group_filter_defaults",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Multiple defaults can be specified, however only valid choices depending on the other filters will be used.",
                        related_name="default_charts",
                        to="core.indicatorgroup",
                    ),
                ),
                (
                    "indicator_group_filter_ignored",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Values specified here will be hidden and not available for selection.",
                        related_name="ignored_charts",
                        to="core.indicatorgroup",
                    ),
                ),
                (
                    "period_filter_defaults",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Multiple defaults can be specified, however only valid choices depending on the other filters will be used.",
                        related_name="default_charts",
                        to="core.period",
                    ),
                ),
                (
                    "period_filter_ignored",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Values specified here will be hidden and not available for selection.",
                        related_name="ignored_charts",
                        to="core.period",
                    ),
                ),
                (
                    "unit_filter_defaults",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Multiple defaults can be specified, however only valid choices depending on the other filters will be used.",
                        related_name="default_charts",
                        to="core.unit",
                    ),
                ),
                (
                    "unit_filter_ignored",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Values specified here will be hidden and not available for selection.",
                        related_name="ignored_charts",
                        to="core.unit",
                    ),
                ),
                (
                    "chart_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="charts.chartgroup",
                    ),
                ),
            ],
            options={
                "ordering": ["display_order", "code"],
                "unique_together": {("chart_group", "code")},
            },
        ),
        migrations.CreateModel(
            name="ExtraChartNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "note",
                    models.CharField(
                        help_text="Extra notes to show in the chart", max_length=255
                    ),
                ),
                (
                    "hide_from_line_charts",
                    models.BooleanField(
                        default=False,
                        help_text="Hide all data points matching this indicator/period combination from all line charts.",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extra_notes",
                        to="core.indicator",
                    ),
                ),
                (
                    "period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.period"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="IndicatorChartOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Color used for this indicator chart series",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                    ),
                ),
                (
                    "dash_style",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Dash", "Dash"),
                            ("DashDot", "DashDot"),
                            ("Dot", "Dot"),
                            ("LongDash", "LongDash"),
                            ("LongDashDot", "LongDashDot"),
                            ("LongDashDotDot", "LongDashDotDot"),
                            ("ShortDash", "ShortDash"),
                            ("ShortDashDot", "ShortDashDot"),
                            ("ShortDashDotDot", "ShortDashDotDot"),
                            ("ShortDot", "ShortDot"),
                            ("Solid", "Solid"),
                        ],
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.dashStyle",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "line_width",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.series.lineWidth",
                        null=True,
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("circle", "circle"),
                            ("square", "square"),
                            ("diamond", "diamond"),
                            ("triangle", "triangle"),
                            ("triangle-down", "triangle-down"),
                        ],
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.marker.symbol",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "custom_symbol",
                    models.ImageField(
                        blank=True,
                        default=None,
                        help_text="Custom symbol used instead of the predefined ones",
                        null=True,
                        upload_to="",
                    ),
                ),
                (
                    "marker_enabled",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.marker.enabled",
                        null=True,
                    ),
                ),
                (
                    "marker_radius",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.marker.radius",
                        null=True,
                    ),
                ),
                (
                    "data_labels_enabled",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="https://api.highcharts.com/highcharts/plotOptions.spline.dataLabels.enabled",
                        null=True,
                    ),
                ),
                (
                    "indicator",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chart_options",
                        to="core.indicator",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChartFilterOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "filter_field",
                    models.CharField(
                        choices=[
                            ("indicatorGroup", "Indicator Group"),
                            ("indicator", "Indicator"),
                            ("breakdownGroup", "Breakdown Group"),
                            ("breakdown", "Breakdown"),
                            ("period", "Period"),
                            ("unit", "Unit"),
                            ("country", "Country"),
                        ],
                        help_text="Order of the filter in the chart. Filters not specified here will use the default order. Filters that are not used in the chart will be ignored.",
                        max_length=50,
                    ),
                ),
                (
                    "chart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="filter_order",
                        to="charts.chart",
                    ),
                ),
            ],
            options={
                "verbose_name": "Chart Filter Order",
                "verbose_name_plural": "Chart Filters Order",
                "ordering": ["display_order"],
                "unique_together": {("chart", "filter_field")},
            },
        ),
        migrations.CreateModel(
            name="ChartFontStyle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "field",
                    models.CharField(
                        choices=[
                            ("title.style", "Title"),
                            ("subtitle.style", "Subtitle"),
                            ("legend.itemStyle", "Legend Item"),
                            ("tooltip.style", "Tooltip"),
                            ("xAxis.title.style", "Horizontal Axis Title"),
                            ("yAxis.title.style", "Vertical Axis Title"),
                            ("xAxis.labels.style", "Horizontal Axis Labels"),
                            ("yAxis.labels.style", "Vertical Axis Labels"),
                            ("plotOptions.series.dataLabels.style", "Data Labels"),
                            ("credits.style", "Chart Credits"),
                        ],
                        help_text="The chart item(s) this style applies to.",
                        max_length=60,
                    ),
                ),
                (
                    "font_weight",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (100, "Thin (Hairline)"),
                            (200, "Extra Light (Ultra Light)"),
                            (300, "Light"),
                            (400, "Normal (Regular)"),
                            (500, "Medium"),
                            (600, "Semi Bold (Demi Bold)"),
                            (700, "Bold"),
                            (800, "Extra Bold (Ultra Bold)"),
                            (900, "Black (Heavy)"),
                            (950, "Extra Black (Ultra Black)"),
                        ],
                        default=None,
                        help_text="Set the weight (or boldness) of the font.",
                        null=True,
                    ),
                ),
                (
                    "font_size_px",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="Set the font size in pixels.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(8),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "font_color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Set the text color.",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                    ),
                ),
                (
                    "chart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="font_styles",
                        to="charts.chart",
                    ),
                ),
            ],
            options={
                "unique_together": {("chart", "field")},
            },
        ),
    ]
