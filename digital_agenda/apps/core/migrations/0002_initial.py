# Generated by Django 4.1.4 on 2023-01-27 10:02

import colorfield.fields
import digital_agenda.apps.core.models
from django.conf import settings
import django.contrib.postgres.fields.citext
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("estat", "0002_initial"),
        ("core", "0001_citext"),
    ]

    operations = [
        migrations.CreateModel(
            name="Breakdown",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    django.contrib.postgres.fields.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="BreakdownGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "code",
                    django.contrib.postgres.fields.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["display_order", "code"],
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    django.contrib.postgres.fields.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#CCCCCC",
                        help_text="Color used for this countries chart series",
                        image_field=None,
                        max_length=18,
                        samples=None,
                    ),
                ),
                ("is_group", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name_plural": "Countries",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    django.contrib.postgres.fields.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("note", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="Indicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    django.contrib.postgres.fields.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                ("note", models.TextField(blank=True, null=True)),
                (
                    "data_source",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicators",
                        to="core.datasource",
                    ),
                ),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="IndicatorGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "code",
                    django.contrib.postgres.fields.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["display_order", "code"],
            },
        ),
        migrations.CreateModel(
            name="Period",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                ("code", models.PositiveIntegerField(unique=True)),
            ],
            options={
                "ordering": ["-code"],
            },
        ),
        migrations.CreateModel(
            name="Unit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    django.contrib.postgres.fields.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="IndicatorGroupLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.indicatorgroup",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.indicator"
                    ),
                ),
            ],
            options={
                "verbose_name": "indicator",
                "verbose_name_plural": "membership",
                "ordering": ["display_order"],
                "unique_together": {("indicator", "group")},
            },
        ),
        migrations.AddField(
            model_name="indicatorgroup",
            name="indicators",
            field=models.ManyToManyField(
                blank=True,
                related_name="groups",
                through="core.IndicatorGroupLink",
                to="core.indicator",
            ),
        ),
        migrations.CreateModel(
            name="Fact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.FloatField(blank=True, null=True)),
                ("flags", models.CharField(blank=True, max_length=12)),
                (
                    "breakdown",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.breakdown",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.country",
                    ),
                ),
                (
                    "import_config",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="estat.importconfig",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.indicator",
                    ),
                ),
                (
                    "period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.period",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.unit",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DataFileImport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        storage=digital_agenda.apps.core.models._import_files_storage,
                        upload_to=digital_agenda.apps.core.models.upload_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["xls", "xlsx"],
                                message="File extension not supported.",
                            ),
                            digital_agenda.apps.core.models.validate_upload_mime_type,
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("errors", models.JSONField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BreakdownGroupLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "breakdown",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.breakdown"
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.breakdowngroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "breakdown",
                "verbose_name_plural": "membership",
                "ordering": ["display_order"],
            },
        ),
        migrations.AddField(
            model_name="breakdowngroup",
            name="breakdowns",
            field=models.ManyToManyField(
                blank=True,
                related_name="groups",
                through="core.BreakdownGroupLink",
                to="core.breakdown",
            ),
        ),
        migrations.AddConstraint(
            model_name="fact",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("value__isnull", False),
                    models.Q(("flags", ""), _negated=True),
                    _connector="OR",
                ),
                name="core_fact_either_val_or_flags",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="fact",
            unique_together={("indicator", "breakdown", "unit", "country", "period")},
        ),
        migrations.AlterUniqueTogether(
            name="breakdowngrouplink",
            unique_together={("breakdown", "group")},
        ),
    ]
