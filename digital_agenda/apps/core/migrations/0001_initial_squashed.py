# Generated by Django 5.2.7 on 2025-10-07 07:43

import colorfield.fields
from django.contrib.postgres.operations import CITextExtension

import digital_agenda.apps.core.models
import digital_agenda.common.citext
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("estat", "0001_initial_squashed"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        CITextExtension(),
        migrations.CreateModel(
            name="Breakdown",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="BreakdownGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["display_order", "code"],
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#CCCCCC",
                        help_text="Color used for this countries chart series",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                ("is_group", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name_plural": "Countries",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("note", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="Indicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                (
                    "time_coverage",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Time coverage to display instead of the automatically calculated one",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("note", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="IndicatorGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["display_order", "code"],
            },
        ),
        migrations.CreateModel(
            name="Period",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, db_index=True)),
            ],
            options={
                "ordering": ["-code"],
            },
        ),
        migrations.CreateModel(
            name="StaticPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255)),
                ("code", models.SlugField(max_length=255, unique=True)),
                ("body", models.TextField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Unit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("label", models.TextField(blank=True, null=True)),
                (
                    "alt_label",
                    models.TextField(blank=True, null=True, verbose_name="Alt. label"),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="BreakdownGroupLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "breakdown",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.breakdown"
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.breakdowngroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "breakdown",
                "verbose_name_plural": "membership",
                "ordering": ["display_order"],
                "unique_together": {("breakdown", "group")},
            },
        ),
        migrations.AddField(
            model_name="breakdowngroup",
            name="breakdowns",
            field=models.ManyToManyField(
                blank=True,
                related_name="groups",
                through="core.BreakdownGroupLink",
                to="core.breakdown",
            ),
        ),
        migrations.CreateModel(
            name="DataFileImport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        upload_to=digital_agenda.apps.core.models.upload_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["xls", "xlsx"],
                                message="File extension not supported.",
                            ),
                            digital_agenda.apps.core.models.validate_upload_mime_type,
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Upload data from file",
                "verbose_name_plural": "Upload data from file",
            },
        ),
        migrations.CreateModel(
            name="DataFileImportTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="id",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=256, verbose_name="description"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="created on"),
                ),
                (
                    "started_on",
                    models.DateTimeField(null=True, verbose_name="started on"),
                ),
                (
                    "completed_on",
                    models.DateTimeField(null=True, verbose_name="completed on"),
                ),
                (
                    "progress",
                    models.IntegerField(blank=True, null=True, verbose_name="progress"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "PENDING"),
                            ("RECEIVED", "RECEIVED"),
                            ("STARTED", "STARTED"),
                            ("PROGESS", "PROGESS"),
                            ("SUCCESS", "SUCCESS"),
                            ("FAILURE", "FAILURE"),
                            ("REVOKED", "REVOKED"),
                            ("REJECTED", "REJECTED"),
                            ("RETRY", "RETRY"),
                            ("IGNORED", "IGNORED"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=128,
                        verbose_name="status",
                    ),
                ),
                (
                    "job_id",
                    models.CharField(blank=True, max_length=128, verbose_name="job id"),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[
                            ("UNKNOWN", "UNKNOWN"),
                            ("SYNC", "SYNC"),
                            ("ASYNC", "ASYNC"),
                        ],
                        db_index=True,
                        default="UNKNOWN",
                        max_length=128,
                        verbose_name="mode",
                    ),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True, max_length=256, verbose_name="failure reason"
                    ),
                ),
                ("log_text", models.TextField(blank=True, verbose_name="log text")),
                (
                    "delete_existing",
                    models.BooleanField(
                        default=False,
                        help_text="Delete facts linked to this import file before starting the import",
                    ),
                ),
                (
                    "task_verbosity",
                    models.PositiveIntegerField(
                        choices=[
                            (0, "NONE"),
                            (1, "WARNING"),
                            (2, "INFO"),
                            (3, "DEBUG"),
                        ],
                        default=2,
                    ),
                ),
                ("errors", models.JSONField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "import_file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="core.datafileimport",
                    ),
                ),
            ],
            options={
                "verbose_name": "Upload file result",
                "verbose_name_plural": "Upload file results",
                "get_latest_by": "created_on",
            },
        ),
        migrations.CreateModel(
            name="IndicatorDataSourceLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.datasource",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.indicator"
                    ),
                ),
            ],
            options={
                "unique_together": {("indicator", "data_source")},
            },
        ),
        migrations.AddField(
            model_name="indicator",
            name="data_sources",
            field=models.ManyToManyField(
                blank=True,
                related_name="indicators",
                through="core.IndicatorDataSourceLink",
                to="core.datasource",
            ),
        ),
        migrations.CreateModel(
            name="IndicatorGroupLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(db_index=True, default=100000),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.indicatorgroup",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.indicator"
                    ),
                ),
            ],
            options={
                "verbose_name": "indicator",
                "verbose_name_plural": "membership",
                "ordering": ["display_order"],
                "unique_together": {("indicator", "group")},
            },
        ),
        migrations.AddField(
            model_name="indicatorgroup",
            name="indicators",
            field=models.ManyToManyField(
                blank=True,
                related_name="groups",
                through="core.IndicatorGroupLink",
                to="core.indicator",
            ),
        ),
        migrations.CreateModel(
            name="Fact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.FloatField(blank=True, null=True)),
                ("flags", models.CharField(blank=True, max_length=12)),
                (
                    "reference_period",
                    digital_agenda.common.citext.CICharField(
                        blank=True, max_length=60, null=True
                    ),
                ),
                ("remarks", models.TextField(blank=True, null=True)),
                (
                    "breakdown",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.breakdown",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.country",
                    ),
                ),
                (
                    "import_config",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="estat.importconfig",
                    ),
                ),
                (
                    "import_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.datafileimport",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.indicator",
                    ),
                ),
                (
                    "period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.period",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facts",
                        to="core.unit",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("value__isnull", False),
                            models.Q(("flags", ""), _negated=True),
                            _connector="OR",
                        ),
                        name="core_fact_either_val_or_flags",
                    )
                ],
                "unique_together": {
                    ("indicator", "breakdown", "unit", "country", "period")
                },
            },
        ),
    ]
