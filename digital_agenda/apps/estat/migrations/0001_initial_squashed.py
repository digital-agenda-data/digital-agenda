# Generated by Django 5.2.7 on 2025-10-07 07:43
from django.contrib.postgres.operations import CITextExtension

import digital_agenda.apps.estat.models
import digital_agenda.common.citext
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        CITextExtension(),
        migrations.CreateModel(
            name="GeoGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
                ("size", models.PositiveIntegerField()),
                ("note", models.CharField(blank=True, max_length=1024, null=True)),
                ("geo_codes", models.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name="ImportConfigTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    digital_agenda.common.citext.CICharField(
                        max_length=60, unique=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ImportConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", digital_agenda.common.citext.CICharField(max_length=60)),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Human readable title for logging and differentiating from multiple configs for the same dataset",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "additional_remarks",
                    models.TextField(
                        blank=True, help_text="Additional notes/remarks", null=True
                    ),
                ),
                (
                    "disable_check_updates",
                    models.BooleanField(
                        default=False, help_text="Don't check for new data in ESTAT"
                    ),
                ),
                (
                    "data_last_update",
                    models.DateTimeField(
                        help_text="Last data update of the local copy of the dataset as extracted from the ESTAT annotations",
                        null=True,
                    ),
                ),
                (
                    "datastructure_last_update",
                    models.DateTimeField(
                        help_text="Last structure update of the local copy of the dataset as extracted from the ESTAT annotations",
                        null=True,
                    ),
                ),
                (
                    "datastructure_last_version",
                    models.CharField(
                        help_text="Last version update of the local copy of the dataset as extracted from the ESTAT annotations",
                        max_length=60,
                        null=True,
                    ),
                ),
                (
                    "new_version_available",
                    models.BooleanField(
                        default=False,
                        help_text="An updated version of the dataset is available in ESTAT",
                    ),
                ),
                (
                    "conflict_resolution",
                    models.CharField(
                        choices=[
                            ("RAISE_ERROR", "Raise errors on duplicate keys"),
                            ("SUM_VALUES", "Add values and merge flags"),
                            ("AVERAGE_VALUES", "Average values and merge flags"),
                        ],
                        default="RAISE_ERROR",
                        help_text="Importer behavior when a duplicate key is detected in the processed dataset. Can be used to merge multiple values into a single surrogate indicator.",
                        max_length=60,
                    ),
                ),
                ("indicator", digital_agenda.common.citext.CICharField(max_length=60)),
                ("indicator_is_surrogate", models.BooleanField(default=False)),
                ("breakdown", digital_agenda.common.citext.CICharField(max_length=60)),
                ("breakdown_is_surrogate", models.BooleanField(default=False)),
                (
                    "country",
                    digital_agenda.common.citext.CICharField(
                        default="geo", max_length=60
                    ),
                ),
                ("country_is_surrogate", models.BooleanField(default=False)),
                (
                    "unit",
                    digital_agenda.common.citext.CICharField(
                        default="unit", max_length=60
                    ),
                ),
                ("unit_is_surrogate", models.BooleanField(default=False)),
                (
                    "period",
                    digital_agenda.common.citext.CICharField(
                        default="time", max_length=60
                    ),
                ),
                ("period_is_surrogate", models.BooleanField(default=False)),
                (
                    "reference_period",
                    digital_agenda.common.citext.CICharField(
                        blank=True,
                        help_text="String only field, doesn't required related object to exist",
                        max_length=60,
                        null=True,
                    ),
                ),
                ("reference_period_is_surrogate", models.BooleanField(default=False)),
                (
                    "remarks",
                    digital_agenda.common.citext.CICharField(
                        blank=True,
                        help_text="String only field, doesn't required related object to exist",
                        max_length=60,
                        null=True,
                    ),
                ),
                ("remarks_is_surrogate", models.BooleanField(default=False)),
                (
                    "period_start",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Only include datapoints for periods greater than or equal to this year",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1990)],
                    ),
                ),
                (
                    "period_end",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Only include datapoints for periods less than or equal to this year",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1990)],
                    ),
                ),
                (
                    "filters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Object with ESTAT dimension keys and an Array of accepted codes as values.",
                    ),
                ),
                (
                    "mappings",
                    models.JSONField(
                        blank=True,
                        default=digital_agenda.apps.estat.models.default_mappings,
                        help_text="Define how ESTAT codes are transformed before inserting into the DB",
                    ),
                ),
                (
                    "country_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Only include datapoints for countries in this group",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="estat.geogroup",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Assigned tags used for filtering and searching; has no impact on the data import",
                        to="estat.importconfigtag",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ImportFromConfigTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="id",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=256, verbose_name="description"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="created on"),
                ),
                (
                    "started_on",
                    models.DateTimeField(null=True, verbose_name="started on"),
                ),
                (
                    "completed_on",
                    models.DateTimeField(null=True, verbose_name="completed on"),
                ),
                (
                    "progress",
                    models.IntegerField(blank=True, null=True, verbose_name="progress"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "PENDING"),
                            ("RECEIVED", "RECEIVED"),
                            ("STARTED", "STARTED"),
                            ("PROGESS", "PROGESS"),
                            ("SUCCESS", "SUCCESS"),
                            ("FAILURE", "FAILURE"),
                            ("REVOKED", "REVOKED"),
                            ("REJECTED", "REJECTED"),
                            ("RETRY", "RETRY"),
                            ("IGNORED", "IGNORED"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=128,
                        verbose_name="status",
                    ),
                ),
                (
                    "job_id",
                    models.CharField(blank=True, max_length=128, verbose_name="job id"),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[
                            ("UNKNOWN", "UNKNOWN"),
                            ("SYNC", "SYNC"),
                            ("ASYNC", "ASYNC"),
                        ],
                        db_index=True,
                        default="UNKNOWN",
                        max_length=128,
                        verbose_name="mode",
                    ),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True, max_length=256, verbose_name="failure reason"
                    ),
                ),
                ("log_text", models.TextField(blank=True, verbose_name="log text")),
                (
                    "force_download",
                    models.BooleanField(
                        default=False, help_text="Force redownload the dataset"
                    ),
                ),
                (
                    "delete_existing",
                    models.BooleanField(
                        default=False,
                        help_text="Delete facts linked to this import config before starting the import",
                    ),
                ),
                (
                    "task_verbosity",
                    models.PositiveIntegerField(
                        choices=[
                            (0, "NONE"),
                            (1, "WARNING"),
                            (2, "INFO"),
                            (3, "DEBUG"),
                        ],
                        default=2,
                    ),
                ),
                ("errors", models.JSONField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "import_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="estat.importconfig",
                    ),
                ),
            ],
            options={
                "verbose_name": "Import config result",
                "verbose_name_plural": "Import configs results",
                "get_latest_by": "created_on",
            },
        ),
    ]
