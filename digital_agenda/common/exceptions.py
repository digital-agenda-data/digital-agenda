import logging
from rest_framework.views import exception_handler, Response
from rest_framework import status


logger = logging.getLogger(__name__)


def core_exception_handler(exc, context):
    # If an exception is thrown that we don't explicitly handle here, we want
    # to delegate to the default exception handler offered by DRF. If we do
    # handle this exception type, we will still want access to the response
    # generated by DRF, so we get that response up front.
    if getattr(context["request"].user, "is_data_source", False):
        logger.exception(exc)

    response = exception_handler(exc, context)
    handlers = {
        "NotFound": _handle_not_found_error,
        "Http404": _handle_not_found_error,
        "ValidationError": _handle_validation_error,
        "IntegrityError": _handle_integrity_error,
    }
    # This is how we identify the type of the current exception. We will use
    # this in a moment to see whether we should handle this exception or let
    # Django REST Framework do it's thing.
    exception_class = exc.__class__.__name__
    if exception_class in handlers:
        # If this exception is one that we can handle, handle it. Otherwise,
        # return the response generated earlier by the default exception
        # handler.
        return handlers[exception_class](exc, context, response)

    return response


def _handle_generic_error(exc, context, response):
    response = Response(
        {"error": "Server error", "details": getattr(exc, "messages", "")},
        status=status.HTTP_500_INTERNAL_SERVER_ERROR,
    )
    return response


def _handle_not_found_error(exc, context, response):
    view = context.get("view", None)

    if view:
        model_name = "Unknown model"
        if hasattr(view, "model"):
            model_name = view.model.__name__
        elif hasattr(view, "queryset") and view.queryset is not None:
            model_name = view.queryset.model._meta.verbose_name

        response = Response(
            {
                "error": f"{model_name} not found",
                "details": getattr(exc, "messages", ""),
            },
            status=status.HTTP_404_NOT_FOUND,
        )

    else:
        response = _handle_generic_error(exc, context, response)

    return response


def _handle_validation_error(exc, context, response):
    response = Response(
        {"error": "Validation error", "details": getattr(exc, "detail", "")},
        status=status.HTTP_400_BAD_REQUEST,
    )

    return response


def _handle_integrity_error(exc, context, response):
    response = Response(
        {
            "error": "There is a conflict between the data you are trying to save and existing data.",
            "details": getattr(exc, "messages", ""),
        },
        status=status.HTTP_400_BAD_REQUEST,
    )

    return response
